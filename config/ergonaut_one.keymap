#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

/ {
    behaviors {
        ht: ht {
            compatible = "zmk,behavior-hold-tap";
            label = "HT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <300>;
            require-prior-idle-ms = <100>;
            flavor = "tap-preferred";
        };
    };

    macros {
        sleep_macro: sleep_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LG(D) &kp LA(F4) &kp UP_ARROW &kp ENTER>;
            label = "SLEEP_MACRO";
            wait-ms = <300>;
        };

        BRIGHTNESS_DOWN: BRIGHTNESS_DOWN {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp C_BRIGHTNESS_DEC &kp C_BRIGHTNESS_DEC &kp C_BRIGHTNESS_DEC &kp C_BRIGHTNESS_DEC &kp C_BRIGHTNESS_DEC &kp C_BRIGHTNESS_DEC &kp C_BRIGHTNESS_DEC &kp C_BRIGHTNESS_DEC &kp C_BRIGHTNESS_DEC &kp C_BRIGHTNESS_DEC>;
            label = "BRIGHTNESS_DOWN";
            wait-ms = <1>;
        };

        BRIGHTNESS_UP: BRIGHTNESS_UP {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp C_BRIGHTNESS_INC &kp C_BRIGHTNESS_INC &kp C_BRIGHTNESS_INC &kp C_BRIGHTNESS_INC &kp C_BRIGHTNESS_INC &kp C_BRIGHTNESS_INC &kp C_BRIGHTNESS_INC &kp C_BRIGHTNESS_INC &kp C_BRIGHTNESS_INC &kp C_BRIGHTNESS_INC>;
            label = "BRIGHTNESS_UP";
            wait-ms = <1>;
        };

        number_1: number_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LEFT_SHIFT) &kp NUMBER_1 &kp LA(LEFT_SHIFT)>;
            label = "NUMBER_1";
            wait-ms = <1>;
        };
    };

    combos {
        compatible = "zmk,combos";

        caps {
            bindings = <&kp CAPSLOCK>;
            key-positions = <19 16 15 20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  GUI |   ~  |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |  [   | GUI/] |
            //        | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |CTRL/'|
            //        | LALT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | RALT |
            //                           | RSE | SPC | LWR |   | LWR | BSPC | RSE |

            bindings = <
&kp GRAVE     &kp Q           &kp W           &kp E        &kp R             &ht RA(T) T  &kp Y      &kp U             &ht RA(I) I    &kp O           &kp P                   &kp RA(I)
&kp TAB       &ht LEFT_WIN A  &ht LEFT_ALT S  &ht LCTRL D  &ht LEFT_SHIFT F  &kp G        &kp H      &ht LEFT_SHIFT J  &ht LCTRL K    &ht LEFT_ALT L  &ht LEFT_WIN SEMICOLON  &kp LEFT_BRACKET
&kp CAPSLOCK  &kp Z           &kp X           &kp C        &kp V             &kp B        &kp N      &ht RA(M) M       &kp COMMA      &kp PERIOD      &kp SLASH               &kp RIGHT_BRACKET
                                              &kp ESCAPE   &mo 2             &kp SPACE    &kp ENTER  &mo 1             &kp BACKSPACE
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |     |  _  |  F1 |  F2 |  F3 |  F4 |  F5 |   |  F6 |  F7 |  F8 |  F9 | F10 | F11 | F12 |
            //       |  +  |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |  -  |
            //       |  =  |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |     |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&trans  &kp HOME          &kp LC(LEFT)       &kp UP_ARROW    &kp LC(RIGHT)         &kp PAGE_UP    &kp PLUS      &kp LS(N7)                   &kp LS(NUMBER_8)  &kp LS(N9)                 &kp KP_MULTIPLY         &trans
&trans  &ht LEFT_WIN TAB  &ht LEFT_ALT LEFT  &ht LCTRL DOWN  &ht LEFT_SHIFT RIGHT  &kp PAGE_DOWN  &kp KP_MINUS  &ht LEFT_SHIFT LS(NUMBER_4)  &ht LCTRL LS(N5)  &ht LEFT_ALT LS(NUMBER_6)  &ht LEFT_WIN KP_DIVIDE  &trans
&trans  &kp END           &kp LS(LC(LEFT))   &trans          &kp LS(LC(RIGHT))     &kp INSERT     &kp EQUAL     &number_1                    &kp LS(NUMBER_2)  &kp LS(NUMBER_3)           &kp LS(N0)              &trans
                                             &trans          &mo 3                 &trans         &trans        &mo 3                        &trans
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |     | NMLK |  /  |  7  |  8  |  9  |  -  |   | VOLU| HOME| PRSC| PGUP| SCLK| CLCK|     |
            //       | CTRL |  *  |  4  |  5  |  6  |  +  |   | MUT | LEFT|  UP | RGHT| INS | APP |
            //       |      |  0  |  1  |  2  |  3  |  .  |   | VOLD| END | DOWN| PGDN| PAUS|     |
            //                          |     |     | ADJ |   | ADJ |     |     |

            bindings = <
&none          &kp LS(GRAVE)      &kp NUMBER_2   &kp NUMBER_3  &kp NUMBER_4   &kp NUMBER_6     &kp RS(BACKSLASH)  &kp RA(PERIOD)      &kp RA(SLASH)      &kp LS(RIGHT_BRACKET)  &kp GRAVE      &none
&kp N5         &kp BACKSLASH      &kp NUMBER_8   &kp MINUS     &kp LS(EQUAL)  &kp EQUAL        &kp RA(COMMA)      &kp NUMBER_9        &kp NUMBER_0       &kp LS(LEFT_BRACKET)   &kp LS(GRAVE)  &none
&kp RA(GRAVE)  &kp RS(RA(COMMA))  &kp RA(MINUS)  &kp NUMBER_1  &kp NUMBER_7   &kp RA(RS(SQT))  &kp RS(MINUS)      &kp RA(RS(PERIOD))  &kp RS(RA(SLASH))  &kp RA(O)              &kp RA(P)      &kp RA(NON_US_BACKSLASH)
                                                 &trans        &mo 3          &trans           &trans             &mo 3               &kp DEL
            >;
        };

        adjust_layer {
            // -----------------------------------------------------------------------------------------
            // | RST | BLDR |     |     |     |     |     |   |     |     |     |     |     | BLDR | RST |
            //       | BTCLR| BT0 | BT1 | BT2 | BT3 | BT4 |   | BT4 | BT3 | BT2 | BT1 | BT0 | BTCLR|
            //       |      |     |     |     |     |     |   |     |     |     |     |     |      |
            //                          |     |     |     |   |     |     |     |

            bindings = <
&BRIGHTNESS_UP    &kp F1  &kp F2   &kp F3   &kp F4   &kp C_BRIGHTNESS_INC  &kp C_VOLUME_UP    &kp C_PREVIOUS  &kp C_PLAY_PAUSE  &kp C_NEXT    &kp C_REWIND  &kp C_FAST_FORWARD
&BRIGHTNESS_DOWN  &kp F5  &kp F6   &kp F7   &kp F8   &kp C_BRIGHTNESS_DEC  &kp C_VOLUME_DOWN  &kp LEFT_SHIFT  &kp LCTRL         &kp LEFT_ALT  &kp LEFT_WIN  &none
&mo 4             &kp F9  &kp F10  &kp F11  &kp F12  &sleep_macro          &kp C_MUTE         &mkp LCLK       &none             &none         &none         &none
                                   &trans   &none    &trans                &trans             &none           &trans
            >;
        };

        layer_4 {
            bindings = <
&trans          &trans        &trans  &trans  &trans       &trans  &trans  &trans  &trans  &trans  &trans  &trans
&bt BT_CLR_ALL  &bt BT_SEL 0  &trans  &trans  &bootloader  &none   &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans        &trans  &none   &bootloader  &none   &trans  &trans  &trans  &trans  &trans  &trans
                                      &trans  &trans       &trans  &trans  &trans  &trans
            >;
        };
    };
};
